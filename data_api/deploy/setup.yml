- hosts: sms487
  remote_user: '{{ remote_user }}'
  become: True
  become_method: sudo

  vars:
    container_name: sms487-api
    network_name: sms487_net
    service_port: 10500

  tasks:
    - name: Check SSL certificates
      stat:
        path: /etc/letsencrypt/live/{{ http_domain }}
      register: nginx_ssl_result

    - name: Setup NGINX no SSL host config
      template:
        src: provision/nginx-no-ssl.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      when: nginx_ssl_result.stat.exists == False
      register: no_ssl_config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf
      when: no_ssl_config_res.changed

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: no_ssl_config_res.changed

    - name: Install certificate
      shell: |
        certbot --nginx \
          -d {{ http_domain }} \
          -n \
          --agree-tos \
          -m '{{ admin_email }}'
      when: nginx_ssl_result.stat.exists == False
      register: certificate_res

    - name: Create web root
      file:
        dest: /var/www/{{ http_domain }}
        state: directory
        owner: www-data
        group: www-data

    - name: Setup NGINX host config
      template:
        src: provision/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      register: config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: config_res.changed or certificate_res.changed

    - name: Create auth data dir
      file:
        state: directory
        dest: /etc/auth487

    - name: Setup public key
      copy:
        src: ~/.private/auth487/public_key.pem
        dest: /etc/auth487/public_key.pem

    - name: Create docker network for all services
      shell: docker network create --driver bridge '{{ network_name }}' || true

    - name: Update image
      shell: docker pull andre487/{{ container_name }}

    - name: Stop container
      shell: |
        docker stop {{ container_name }} || true
        docker rm {{ container_name }} || true

    - name: Start container
      shell: |
        docker run \
          -d \
          --restart always \
          --network {{ network_name }} \
          --name {{ container_name }} \
          -v "/etc/auth487:/etc/auth487" \
          -v "/usr/local/share/ca-certificates:/usr/local/share/ca-certificates" \
          -e "MONGO_HOST={{ lookup('file', '~/.private/services/mongo/shared/hosts') }}" \
          -e "MONGO_PORT={{ lookup('file', '~/.private/services/mongo/shared/port') }}" \
          -e "MONGO_REPLICA_SET={{ lookup('file', '~/.private/services/mongo/shared/replica_set') }}" \
          -e "MONGO_SSL_CERT={{ lookup('file', '~/.private/services/mongo/shared/ssl_cert') }}" \
          -e "MONGO_USER={{ lookup('file', '~/.private/services/mongo/shared/user') }}" \
          -e "MONGO_PASSWORD={{ lookup('file', '~/.private/services/mongo/shared/password') }}" \
          -e "AUTH_PUBLIC_KEY_FILE=/etc/auth487/public_key.pem" \
          -e "AUTH_DOMAIN=https://auth.andre.life" \
          -p 127.0.0.1:{{ service_port }}:5000 \
          andre487/{{ container_name }}
