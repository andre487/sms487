- hosts: sms487
  remote_user: '{{ remote_user }}'
  become: True
  become_method: sudo

  vars:
    container_name: sms487-api
    network_name: sms487_net
    service_port: 10500
    secret_dir: '{{ playbook_dir }}/../.secret'

  tasks:
    - name: Check SSL certificates
      stat:
        path: /etc/letsencrypt/live/{{ http_domain }}
      register: nginx_ssl_result

    - name: Setup NGINX no SSL host config
      template:
        src: provision/nginx-no-ssl.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      when: nginx_ssl_result.stat.exists == False
      register: no_ssl_config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf
      when: no_ssl_config_res.changed

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: no_ssl_config_res.changed

    - name: Install certificate
      shell: |
        certbot --nginx \
          -d {{ http_domain }} \
          -n \
          --agree-tos \
          -m '{{ admin_email }}'
      when: nginx_ssl_result.stat.exists == False
      register: certificate_res

    - name: Create web root
      file:
        dest: /var/www/{{ http_domain }}
        state: directory
        owner: www-data
        group: www-data

    - name: Setup NGINX host config
      template:
        src: provision/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ container_name }}.conf
      register: config_res

    - name: Enable NGINX host config
      file:
        state: link
        src: /etc/nginx/sites-available/{{ container_name }}.conf
        dest: /etc/nginx/sites-enabled/{{ container_name }}.conf

    - name: Reload NGINX
      service:
        name: nginx
        state: reloaded
      when: config_res.changed or certificate_res.changed

    - name: Create app configs dir
      file:
        state: directory
        dest: /etc/sms487

    - name: Create app MongoDB auth dir
      file:
        state: directory
        dest: /etc/sms487/mongo

    - name: Setup MongoDB auth files
      copy:
        src: '{{ secret_dir }}/mongo/{{ item }}'
        dest: /etc/sms487/mongo/{{ item }}
      with_items:
        - hosts
        - port
        - replica_set
        - auth_src
        - ssl_cert
        - user
        - password

    - name: Create docker network for service
      community.general.docker_network:
        name: '{{ network_name }}'
        state: present
        internal: yes
        driver: bridge
      register: docker_network

    - name: Update image
      community.general.docker_image:
        name: 'andre487/{{ container_name }}'
        source: pull
        force_source: yes
      register: docker_image

    - name: Stop and remove container
      community.general.docker_container:
        name: '{{ container_name }}'
        state: absent
        container_default_behavior: no_defaults
      when: docker_network.changed or docker_image.changed

    - name: Start container
      community.general.docker_container:
        name: '{{ container_name }}'
        image: 'andre487/{{ container_name }}'
        state: started
        container_default_behavior: no_defaults
        detach: yes
        restart_policy: always
        networks_cli_compatible: no
        networks:
          - name: '{{ network_name }}'
        volumes:
          - /etc/sms487:/etc/sms487:ro
          - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
        ports:
          - '127.0.0.1:{{ service_port }}:5000'
        env:
          MONGO_HOST: /etc/sms487/mongo/hosts
          MONGO_PORT: /etc/sms487/mongo/port
          MONGO_REPLICA_SET: /etc/sms487/mongo/replica_set
          MONGO_SSL_CERT: /etc/sms487/mongo/ssl_cert
          MONGO_USER: /etc/sms487/mongo/user
          MONGO_PASSWORD: /etc/sms487/mongo/password
          MONGO_AUTH_SOURCE: /etc/sms487/mongo/auth_src
          MONGO_DB_NAME: sms487
          AUTH_DOMAIN: '{{ auth_domain }}'
      when: docker_network.changed or docker_image.changed
